
/*
  @name block
  @param $name {string}
  @param $nameSpace {string}
  @description Generate module block container
*/

@mixin block($name, $namespace: null) {
  $parent: inspect(&);
  
  @if isBlock($parent) {
    @if isDefined($name) {
      .#{$namespace}#{$name} {
        @content;
      }  
    } @else {
      @include output(valid-name-block);
    }  
  } @else {
    @include output(block-unique);
  }
}

/*
  @name element
  @param $name {string}
  @description Generates an element within a block
*/

@mixin element($name) {
  $parent: inspect(&);
  $delimiter: map-get($delimiters, element);
  
  @if isDefined($parent) {
    @if isElement($parent) or isModifier($parent) {
      @include output(element-unique);
    } @else if isDefined($name) {
      &#{$delimiter}#{$name} {
        @content;  
      }   
    } @else {
      @include output(valid-name-element);
    }
  } @else {
    @include output(element-belong);
  }
}

/*
  @name modifier
  @param $name {string}
  @description Generates a modifier on a block or element
*/

@mixin modifier($name) {
  $parent: inspect(&);
  $delimiter: map-get($delimiters, modifier);

  @if isDefined($parent) {
    @if isModifier($parent) {
      @include output(modifier-unique);
    } @else if isDefined($name) {
      &#{$delimiter}#{$name} {
        @content;
      }
    } @else {
      @include output(valid-name-modifier);
    }  
  } @else {
    @include output(modifier-belong);
  }
}

/*
  @name b
  @param $name {string}
  @description Shorthand for block mixin
*/

@mixin b($name, $namespace) {
  @include block($name, $namespace) {
    @content;
  }
}

/*
  @name e
  @param $name {string}
  @description Shorthand for element mixin
*/

@mixin e($name) {
  @include element($name) {
    @content;
  }
}

/*
  @name m
  @param $name {string}
  @description Shorthand for modifier mixin
*/

@mixin m($name) {
  @include modifier($name) {
    @content;
  }
}

/*
  @name createStateSelector
  @param $name {string}
  @param $state {string}  
  @description Generates state selector
*/

@mixin createStateSelector($name, $state: is) {
  $parent: inspect(&);
  $delimiter: map-get($delimiters, state);

  @if isDefined($parent) {  
    &.#{$state}#{$delimiter}#{$name} {
      @content;  
    }
  } @else {
    @include output(state-selector);    
  }
}

/*
  @name is
  @param $name {string}
  @description facade that creates 'is' state selector
*/

@mixin is($name) {
  @include createStateSelector($name) {
    @content;
  }
}

/*
  @name is
  @param $name {string}
  @description facade that creates 'has' state selector
*/

@mixin has($name) {
  @include createStateSelector($name, has) {
    @content;
  }
}

/*
  @name ouput
  @param $string {string}
  @description Gets string from string map to output to the console
*/

@mixin output($string) {
  $str: to_lower_case($string);
  
  @if map-has-key($strings, $string) {
    @debug map-get($strings, $string);  
  } @else {
    @debug map-get($strings, string-missing);
  }
}