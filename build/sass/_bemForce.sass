/*
 *@name $strings {map}
 *@description Error strings for console output

$strings: (element-belong: "Elements must belong to a block", modifier-belong: "A modifier must belong to a block or element", block-unique: "Blocks cannot belong to other blocks", element-unique: "Element cannot be added to other elements or modifiers", modifier-unique: "A modifier must be unique per selector", string-missing: "String missing for output", valid-name-block: "Please pass in a valid name for your block", valid-name-element: "Please pass in a valid name for your element", valid-name-modifier: "Please pass in a valid name for your modifier") !default

/*
 *@name $delimiters {map}
 *@description Configs BEM delimiters for selector construction

$delimiters: (element: "__", modifier: "--") !default

/*
 *@name isDefined
 *@param $value {any}
 *@description Checks to see if the value is defined

@function isDefined($value: null)
  @return $value != null and $value != "" and $value != 0 and $value != false

/*
 *@name isBlock
 *@param $selector {string}
 *@description Checks to see if the selector is not an element and not a modifier

@function isBlock($selector: "null")
  @return $selector == "null"

/*
 *@name isElement
 *@param $selector {string}
 *@description Checks to see if the selector is an element by delimiter

@function isElement($selector)
  $delimiter: map-get($delimiters, element)

  @return str_index($selector, $delimiter) != null

/*
 *@name isModifier
 *@param $selector {string}
 *@description Checks to see if the selector is modifier by delimiter

@function isModifier($selector)
  $delimiter: map-get($delimiters, modifier)

  @return str_index($selector, $delimiter) != null

/*
 *@name block
 *@param $name {string}
 *@description Generate module block container

=block($name)
  $parent: inspect(&)

  @if isBlock($parent)
    @if isDefined($name)
      .#{$name}
        @content
    @else
      +output(valid-name-block)
  @else
    +output(block-unique)

/*
 *@name element
 *@param $name {string}
 *@description Generates an element within a block

=element($name)
  $parent: inspect(&)
  $delimiter: map-get($delimiters, element)

  @if isDefined($parent)
    @if isElement($parent) or isModifier($parent)
      +output(element-unique)
    @else if isDefined($name)
      &#{$delimiter}#{$name}
        @content
    @else
      +output(valid-name-element)
  @else
    +output(element-belong)

/*
 *@name modifier
 *@param $name {string}
 *@description Generates a modifier on a block or element

=modifier($name)
  $parent: inspect(&)
  $delimiter: map-get($delimiters, modifier)

  @if isDefined($parent)
    @if isModifier($parent)
      +output(modifier-unique)
    @else if isDefined($name)
      &#{$delimiter}#{$name}
        @content
    @else
      +output(valid-name-modifier)
  @else
    +output(modifier-belong)

/*
 *@name ouput
 *@param $string {string}
 *@description Gets string from string map to output to the console

=output($string)
  $str: to_lower_case($string)

  @if map-has-key($strings, $string)
    @debug map-get($strings, $string)
  @else
    @debug map-get($strings, string-missing)

/*
 *@name b
 *@param $name {string}
 *@description Shorthand for block mixin

=b($name)
  +block($name)
    @content

/*
 *@name e
 *@param $name {string}
 *@description Shorthand for element mixin

=e($name)
  +element($name)
    @content

/*
 *@name m
 *@param $name {string}
 *@description Shorthand for modifier mixin

=m($name)
  +modifier($name)
    @content
