


$strings: (
  element-belong: 'Elements must belong to a block',
  modifier-belong: 'A modifier must belong to a block or element',
  block-unique: 'Blocks cannot belong to other blocks',
  element-unique: 'Element cannot be added to other elements or modifiers',
  modifier-unique: 'A modifier must be unique per selector',
  string-missing: 'String missing for output',
  valid-name-block: 'Please pass in a valid name for your block',
  valid-name-element: 'Please pass in a valid name for your element',
  valid-name-modifier: 'Please pass in a valid name for your modifier',
  state-selector: 'State selectors "is" and "has" must belong to a selector'
) !default;



$delimiters: (
  element: "__",
  modifier: "--",
  state: '-'
) !default;



@function isDefined($value: null) {
  @return $value != null and $value != '' and $value != 0 and $value != false;
}



@function isBlock($selector: "null") {
  @return $selector == "null";
}



@function isElement($selector) {
  $delimiter: map-get($delimiters, element);
  @return str_index($selector, $delimiter) != null;
}




@function isModifier($selector) {
  $delimiter: map-get($delimiters, modifier);
  @return str_index($selector, $delimiter) != null;
}




@mixin block($name, $namespace: null) {
  $parent: inspect(&);
  
  @if isBlock($parent) {
    @if isDefined($name) {
      .#{$namespace}#{$name} {
        @content;
      }  
    } @else {
      @include output(valid-name-block);
    }  
  } @else {
    @include output(block-unique);
  }
}



@mixin element($name) {
  $parent: inspect(&);
  $delimiter: map-get($delimiters, element);
  
  @if isDefined($parent) {
    @if isElement($parent) or isModifier($parent) {
      @include output(element-unique);
    } @else if isDefined($name) {
      &#{$delimiter}#{$name} {
        @content;  
      }   
    } @else {
      @include output(valid-name-element);
    }
  } @else {
    @include output(element-belong);
  }
}



@mixin modifier($name) {
  $parent: inspect(&);
  $delimiter: map-get($delimiters, modifier);

  @if isDefined($parent) {
    @if isModifier($parent) {
      @include output(modifier-unique);
    } @else if isDefined($name) {
      &#{$delimiter}#{$name} {
        @content;
      }
    } @else {
      @include output(valid-name-modifier);
    }  
  } @else {
    @include output(modifier-belong);
  }
}



@mixin b($name, $namespace) {
  @include block($name, $namespace) {
    @content;
  }
}



@mixin e($name) {
  @include element($name) {
    @content;
  }
}



@mixin m($name) {
  @include modifier($name) {
    @content;
  }
}



@mixin createStateSelector($name, $state: is) {
  $parent: inspect(&);
  $delimiter: map-get($delimiters, state);

  @if isDefined($parent) {  
    &.#{$state}#{$delimiter}#{$name} {
      @content;  
    }
  } @else {
    @include output(state-selector);    
  }
}



@mixin is($name) {
  @include createStateSelector($name) {
    @content;
  }
}



@mixin has($name) {
  @include createStateSelector($name, has) {
    @content;
  }
}



@mixin output($string) {
  $str: to_lower_case($string);
  
  @if map-has-key($strings, $string) {
    @debug map-get($strings, $string);  
  } @else {
    @debug map-get($strings, string-missing);
  }
}